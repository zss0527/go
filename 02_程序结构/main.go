package main

/*
2.1 名称
	名称包括函数、变量、常量、类型、语句标签和包名遵循的命名规则和其它语言类似；
	go语言中变量作用域只有4个：代码块（通常在代码块中通过短变量声明法）、函数内（在函数内部声明通常通过短变量声明法），函数外包内（声明在函数外，小写字母开头），包外可见（声明在函数外且大写字母开头），
	go中没有某个源文件名级别的作用域；其中代码块级别和函数级别统称为局部变量，包外和函数外包内统称为包级别；

2.2 声明
	声明给一个程序实体命名，并且设定其部分或全部属性
	go中有4个主要的声明：变量（var）、常量（const）、类型（type）和函数（func）

2.3 变量
	var name type = expression
	其中类型和表达式可以省略一个以完成自动类型推倒或者类型零值初始化；
	类型零值：数字->0,bool->false,string->"",interface和reference type(slice,pointer,map,channel,func)->nil,composite type(array,struct)->field:零值
		2.3.1 短变量声明
			name := expression
			主要用在局部变量的声明和初始化中，而var通常是为那些跟初始化表达式类型不一致的局部变量保留的或者用于后面才对变量赋值以及变量初始化不重要的情况；
		2.3.2 指针
			指针的值是一个变量的地址，一个指针指示值所保存的位置，相当于变量的别名；
		2.3.3 new函数
			另一种创建变量的方式是哪只的new函数。表达式new(T)创建一个未命名的T类型的变量，初始化为T类型的零值，并返回其地址；
			p := new(int)
			*p = 2
		2.3.4 变量的生命周期
			包级别的和局部变量级别的
2.4 赋值
	go中没有--i或者++i，只有i++或者i--且他们不返回值，也就是不能用变量接收i++或者i--
	2.4.1 多重赋值
		x, y := 1,2
		x, y = y, x
		函数可以一次返回多个值，用多个变量来接收，对想忽略的变量用_接收；
	2.4.2 可赋值性
		常见的赋值语句是显式形式的赋值，但程序中很多地方的赋值是隐式的：函数调用对形参的赋值、return语句对函数返回值接收者的赋值、复合类型的字面量表达式；
		两个值通过==和!=进行比较与可赋值性相关；
2.5 类型声明
	type name underlying-type
	type声明定义一个新的命名类型，它和某个已有类型使用同样的底层类型；
	命名类型通常出现在包级别
2.6 包和文件
	go中包的作用类似其它语言中的库或者模块，用于支持模块化、封装、编译隔离和重用；
	每个包给它的声明提供独立的命名空间，为了从包外部引用一个函数，我们必须明确修饰标识符来指明所指的是image.Decode还是utf16.Decode；
	2.6.1 导入
		导入路径标识符，最后一部分是包的名字
	2.6.2 包初始化
2.7 作用域



*/

func main() {

}
